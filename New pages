"use client";
import React from "react";

function MainComponent() {
  const { data: user } = useUser();
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [templates, setTemplates] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Fetch templates when component mounts
    const fetchTemplates = async () => {
      try {
        const response = await fetch("/api/templates/list", { method: "POST" });
        if (!response.ok) {
          throw new Error("Failed to fetch templates");
        }
        const data = await response.json();
        if (data.status) {
          setTemplates(data.templates);
        } else {
          setError(data.error);
        }
      } catch (error) {
        console.error("Error fetching templates:", error);
        setError("Failed to load templates");
      }
    };

    fetchTemplates();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!user) {
      setError("Please sign in to create infographics");
      return;
    }

    if (!title || !content || !selectedTemplate) {
      setError("Please fill in all required fields");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // First, generate the image using Stable Diffusion
      const imageResponse = await fetch(
        `/integrations/stable-diffusion-v-3/?prompt=${encodeURIComponent(
          content
        )}`,
        {
          method: "GET",
        }
      );

      if (!imageResponse.ok) {
        throw new Error("Failed to generate image");
      }

      const imageData = await imageResponse.json();
      const generated_image_url = imageData.data[0];

      // Then create the infographic
      const response = await fetch("/api/infographics/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          title,
          content,
          generated_image_url,
          template_id: selectedTemplate,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to create infographic");
      }

      const data = await response.json();
      if (data.status) {
        // Redirect to my infographics page on success
        window.location.href = "/my-infographics";
      } else {
        setError(data.error);
      }
    } catch (error) {
      console.error("Error creating infographic:", error);
      setError("Failed to create infographic. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-4xl mx-auto space-y-8">
        <div className="flex justify-between items-center">
          <div className="text-center flex-1">
            <h1 className="text-4xl font-bold text-gray-900 mb-2">
              AI Infographic Creator
            </h1>
            <p className="text-gray-600">
              Transform your text into beautiful infographics using AI
            </p>
          </div>
          <a
            href="/my-infographics"
            className="bg-gray-600 text-white py-2 px-4 rounded-lg hover:bg-gray-700"
          >
            My Infographics
          </a>
        </div>

        {!user ? (
          <div className="text-center p-6 bg-white rounded-lg shadow">
            <p className="text-gray-700 mb-4">
              Please sign in to create infographics
            </p>
            <a
              href="/account/signin"
              className="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700"
            >
              Sign In
            </a>
          </div>
        ) : (
          <form
            onSubmit={handleSubmit}
            className="space-y-6 bg-white p-6 rounded-lg shadow"
          >
            {error && (
              <div className="bg-red-50 text-red-700 p-4 rounded-lg">
                {error}
              </div>
            )}

            <div>
              <label
                htmlFor="title"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Title
              </label>
              <input
                type="text"
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="Enter your infographic title"
                disabled={loading}
              />
            </div>

            <div>
              <label
                htmlFor="content"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Content
              </label>
              <textarea
                id="content"
                value={content}
                onChange={(e) => setContent(e.target.value)}
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 h-32"
                placeholder="Enter the text content for your infographic"
                disabled={loading}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Select Template
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {templates.map((template) => (
                  <div
                    key={template.id}
                    className={`border rounded-lg p-4 cursor-pointer ${
                      selectedTemplate === template.id
                        ? "border-blue-500 bg-blue-50"
                        : "hover:border-gray-400"
                    }`}
                    onClick={() => setSelectedTemplate(template.id)}
                  >
                    <img
                      src={template.preview_url}
                      alt={template.name}
                      className="w-full h-32 object-cover rounded-lg mb-2"
                    />
                    <h3 className="font-medium">{template.name}</h3>
                    <p className="text-sm text-gray-600">
                      {template.description}
                    </p>
                  </div>
                ))}
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:bg-blue-300"
            >
              {loading ? "Creating Infographic..." : "Create Infographic"}
            </button>
          </form>
        )}
      </div>
    </div>
  );
}

export default MainComponent;
